	React
1.组件中的样式
npm install classnames --save
npm i styled-components -S
用法：
import classnames from 'classnames'
className={classnames("a", { "b": true, "d": true })}

import styled from 'styled-components'
const Title = styled.h1`color: #F00`
<Title></Title>

2.引用组件的时候如果不需要根目录div可以换成 Fragment 或者 <></>
import React, { Component, Fragment } from 'react';

3.prop-types
npm install --save prop-types

4.CRA高阶组件配置装饰器模式的写法
让cra支持@装饰器写法
(1).不管你要配置什么，我们最好的方式是使用creat-app-rewired这个包来对cra创建的项目进行轻微的
    配置调整	npm install react-app-rewired --save-dev
(2).安装好之后，在packages.json中把scripts换成react-app-rewired
(3).在根目录下创建config-overrides.js
    module.exports = function override(config, env) {
        //do stuff with the webpack config...
        //如果没有用customize-cra，就在这里可以对config进行配置
        return config;
    }
(4).当然如果想要配置更方便可以再安装customize-cra，安装npm i @babel/plugin-proposal-decorators -D
    然后把config-overrides.js替换成：
    const { override, addDecoratorsLegacy } = require('customize-cra')
    module.exports = override(
      addDecoratorsLegacy()
    )


    吃喝嫖赌都是赔，只有赌博有来回，只要你敢买，别墅靠大海，搏一搏，单车变摩托。 
    赌一赌，摩托变路虎！梭一梭，嫩模任你摸！ 爱拼才会赢，敢下就会红。 要想富，下重注。 
    赌场一分钟，少打十年工。不怕输得苦 ，就怕断了赌 。只要不戒赌，天王盖地虎！
    谁家小孩天天哭？哪个赌友天天输？ 小赌养家糊口，大赌发家致富。
    只要思想不滑坡，办法总比困难多！有钱不赌，对不起父母。 有财不发，对不起妈妈。 
    赌光输光，为国争光。 小赌小赢，大赌大赢。 小赌大赢，祖宗显灵。
    大赌小赢，千万不要停，答应我，赌下去

5. redux的使用

安装：npm i redux -S
      npm install --save react-redux
      npm i redux-thunk -S
redux的基本流程
1.创建reducers
const initState = []
export default (state = initState, action) => {
   switch (action.type) {
      default:
         return state
   }
}
2.合并reducers
import { combineReducers } from 'redux'
import Blog from './blog'

export default combineReducers({
   Blog
})

3.createStore
//创建store
import { createStore, applyMiddleware } from 'redux'
import thunk from 'redux-thunk'
//引入合并后的reducer
import rootReducer from './reducers'
//createStore的第一个参数必须是reduce，如果是多个请在reducers目录下先使用
//combineReducers合并之后再导出
export default createStore(
   rootReducer,
   applyMiddleware(thunk)
)

4.Provider store={store}
import React from 'react'
import { render } from 'react-dom'
import App from './App'
import { Provider } from 'react-redux'
import store from './store'
render(
   <Provider store={store} >
      <App />
   </Provider>,
   document.querySelector("#root")
)
5.connect(mapStateToProps, {...actionCreators})(YourComponent)
import React, { Component } from 'react';
import { connect } from 'react-redux'
import BlogItem from './BlogItem'

class BlogList extends Component {
   //这里需要对传入的数据检测 prop-types
   render() {
      const { blogList, isLoading } = this.props
      return (
         isLoading ? <div>loading...</div> :
            <ul>
               {
                  blogList.map(blog => {
                     return (
                        <BlogItem key={blog.id} {...blog} />
                     )
                  })
               }
            </ul>
      );
   }
}

const mapState = state => ({
   blogList: state.blog.list,
   isLoading: state.blog.isLoading
})

export default connect(mapState)(BlogList)

6.actionCreators
export default {
   // CHANGE_BLOG_LOADING: 'CHANGE_BLOG_LOADING',
   START_BLOG_LIST_FETCH: 'START_BLOG_LIST_FETCH',
   FETCH_SUCCESS_BLOG_LIST: 'FETCH_SUCCESS_BLOG_LIST',
   FETCH_FAILED_BLOG_LIST: 'FETCH_FAILED_BLOG_LIST',
}
7.修改reducers
import actionTypes from './actionTypes'
import { getPosts } from '../services'
const startFetchBlogList = () => {
   return {
      type: actionTypes.START_BLOG_LIST_FETCH
   }
}
const fetchSuccessBlogList = (payload) => {
   return {
      type: actionTypes.FETCH_SUCCESS_BLOG_LIST,
      payload
   }
}
const detchFailedBlogList = () => {
   return {
      type: actionTypes.FETCH_FAILED_BLOG_LIST
   }
}
export const fetchBlogList = () => dispatch => {
   dispatch(startFetchBlogList())
   getPosts()
      .then(res => {
         if (res.status === 200) {
            dispatch(fetchSuccessBlogList({
               list: res.data
            }))
         } else {
            dispatch(detchFailedBlogList())
         }
      })
      .catch(err => {
         dispatch(detchFailedBlogList())
      })
}

6.路由
npm i react-router-dom -S
Router：1.HashRouter；2.BrowserRouter；
    router只有一个，在最顶层
路由组件：
Redirect、Switch、Route、Link、

路由组件加载
component={}
render()=>{}

注意：没有用route渲染的组件如果需要路由跳转会出错，
 this.props.history.push({
      pathname: '/home',
      state: {
          id: this.props.match.params.id
      }
  })
必须使用import { withRouter } from 'react-router-dom'的高阶组件
export default withRouter(Button);


7. ant-design
安装：
npm i antd -S
npm i react-app-rewired customize-cra -S
新建config-overrides.js
const { override, fixBabelImports } = require('customize-cra');
module.exports = override(
   fixBabelImports('import', {
      libraryName: 'antd',
      libraryDirectory: 'es',
      style: 'css',
   }),
);
npm i babel-plugin-import -S

国际化
import zhCN from 'antd/es/locale/zh_CN';
import { LocaleProvider } from 'antd'
<LocaleProvider locale={zhCN}>
   <App />
</LocaleProvider>

自制主题
npm i less less-loader -S
const { override, fixBabelImports, addLessLoader } = require('customize-cra');
module.exports = override(
   fixBabelImports('import', {
      libraryName: 'antd',
      libraryDirectory: 'es',
      style: true,
   }),
   addLessLoader()
);
报错：Inline JavaScript is not enabled. Is it set in your options?
没有设置
module.exports = override(
   addLessLoader({
      javascriptEnabled: true
   })
)
